# -*- coding: utf-8 -*-
"""MiniProjectSem6_R.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0cND-DBwI7JxNaB6Qe98P_0vSR6gSe4
"""

# Load necessary library
library(readr)

# Load the CSV file into a data frame
file_path <- '/content/HR_Analytics.csv'  # Update the file path accordingly
df <- read_csv(file_path)

# Displaying the dimensions (rows and columns) of the data frame
print(paste("Rows:", nrow(df), "Columns:", ncol(df)))

# Displaying the column specification
print(spec(df))

# Perform exploratory data analysis (EDA) to understand the data distribution, correlations, etc.
print(summary(df))

# Example: Checking for missing values
print(colSums(is.na(df)))

# Example: Checking unique values in categorical columns
print(unique(df$department))
print(unique(df$salary))

# Analyzing distribution of employees across departments
department_counts <- table(df$department)
print("Distribution of Employees Across Departments:")
print(department_counts)

# Analyzing distribution of employees across salary levels
salary_counts <- table(df$salary)
print("\nDistribution of Employees Across Salary Levels:")
print(salary_counts)

# Load necessary libraries
library(ggplot2)

# Visualize the distribution of each numerical variable using histograms
# Create a multi-panel plot
ggplot(df, aes(x = satisfaction_level)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Satisfaction Level") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

ggplot(df, aes(x = last_evaluation)) +
  geom_histogram(bins = 20, fill = "salmon", color = "black") +
  labs(title = "Distribution of Last Evaluation") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

ggplot(df, aes(x = average_montly_hours)) +
  geom_histogram(bins = 20, fill = "green", color = "black") +
  labs(title = "Distribution of Average Monthly Hours") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

ggplot(df, aes(x = time_spend_company)) +
  geom_histogram(bins = 10, fill = "orange", color = "black") +
  labs(title = "Distribution of Time Spent in Company") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

# Install GGally package if not already installed
install.packages("GGally")
install.packages("corrplot")

# Load necessary libraries
library(GGally)
library(corrplot)

# Scatter plot matrix
ggpairs(df[, c('satisfaction_level', 'last_evaluation', 'average_montly_hours', 'time_spend_company', 'left')], aes(color = as.factor(left)), diag = list(continuous = "density")) +
  theme_minimal()

# Correlation matrix
correlation_matrix <- cor(df[, c('satisfaction_level', 'last_evaluation', 'average_montly_hours', 'time_spend_company', 'left')])
corrplot(correlation_matrix, method="circle", type="lower", tl.col="black", tl.srt=45, tl.cex=0.8)

# Load necessary libraries
library(ggplot2)

# Visualize the distribution of satisfaction_level for employees who left vs. those who stayed
ggplot(df, aes(x = satisfaction_level, fill = ifelse(left == 1, 'Left', 'Stayed'))) +
  geom_histogram(binwidth = 0.05, color = 'black', alpha = 0.7, position = "identity") +  # Set position = "identity"
  scale_fill_manual(values = c("Stayed" = "lightgreen", "Left" = "red")) +  # Set colors
  labs(title = 'Distribution of Satisfaction Level by Employee Status (Left or Stayed)',
       x = 'Satisfaction Level',
       y = 'Count') +
  theme_minimal()

# Load necessary libraries
library(ggplot2)
library(dplyr)

# Visualize the distribution of time_spend_company for employees who left vs. those who stayed
ggplot(df, aes(x = as.factor(time_spend_company), fill = ifelse(left == 1, "Left", "Stayed"))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("Stayed" = "lightgreen", "Left" = "red")) +  # Set colors
  labs(title = "Distribution of Time Spent in Company by Employee Status (Left or Stayed)",
       x = "Time Spent in Company (Years)",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_x_discrete(labels = as.character(0:10))

print(unique(df$left))

# Load necessary libraries
library(ggplot2)

# Visualize the distribution of work accidents for employees who left vs. those who stayed
ggplot(df, aes(x = as.factor(work_accident), fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Work Accidents for Employees",
       x = "Work Accident (0: No, 1: Yes)",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_x_discrete(labels = c("No", "Yes")) +  # Adjust x-axis labels
  guides(fill = guide_legend(title = "Left")) # Adjust legend title

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)  # Load tidyr for spread function

# Visualize the distribution of salary levels for employees who left vs. those who stayed
ggplot(df, aes(x = salary, fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Salary Levels for Employees",
       x = "Salary Level",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left")) +  # Adjust legend title
  scale_x_discrete(limits = c("low", "medium", "high"))  # Adjust x-axis limits

# Calculate percentage of employees who left and stayed for each salary level
percentage_by_salary <- df %>%
  group_by(salary, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print the percentages
print("Percentage of Employees Who Left and Stayed by Salary Level:")
print(percentage_by_salary[c('salary', 'Percentage_Left', 'Percentage_Stayed')])

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)  # Load tidyr for spread function

# Visualize the distribution of promotion status for employees who left vs. those who stayed
ggplot(df, aes(x = as.factor(promotion_last_5years), fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "indianred")) +  # Set colors
  labs(title = "Distribution of Promotion Status for Employees",
       x = "Promotion Last 5 Years (0: No, 1: Yes)",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left")) +  # Adjust legend title
  scale_x_discrete(labels = c("No", "Yes"))  # Adjust x-axis labels

# Calculate percentage of employees who left and stayed for each promotion status
percentage_by_promotion <- df %>%
  group_by(promotion_last_5years, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print the percentages
print("Percentage of Employees Who Left and Stayed by Promotion Status:")
print(percentage_by_promotion[c('promotion_last_5years', 'Percentage_Left', 'Percentage_Stayed')])

# Load necessary libraries
library(ggplot2)
library(dplyr)

# Visualize the distribution of departments for employees who left vs. those who stayed
ggplot(df, aes(x = department, fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Employees Who Left and Stayed by Department",
       x = "Department",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left")) +  # Adjust legend title
  coord_flip()  # Flip the x-axis to make it vertical

# Calculate percentage of employees who left and stayed for each department
percentage_by_department <- df %>%
  group_by(department, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print the percentages
print("Percentage of Employees Who Left and Stayed by Department:")
print(percentage_by_department[c('department', 'Percentage_Left', 'Percentage_Stayed')])

# Load necessary libraries
library(ggplot2)
library(dplyr)

# Visualize the distribution of number of projects for employees who left vs. those who stayed
ggplot(df, aes(x = as.factor(number_projects), fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Employees Who Left and Stayed by Number of Projects",
       x = "Number of Projects",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left"))  # Adjust legend title

# Calculate percentage of employees who left and stayed for each number of projects
percentage_by_projects <- df %>%
  group_by(number_projects, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print the percentages
print("Percentage of Employees Who Left and Stayed by Number of Projects:")
print(percentage_by_projects[c('number_projects', 'Percentage_Left', 'Percentage_Stayed')])

# Load necessary libraries
library(ggplot2)
library(dplyr)

# Define evaluation score bins
eval_bins <- c(0.0, 0.4, 0.6, 0.8, 1.0)

# Create a new column to represent evaluation score range
df$evaluation_range <- cut(df$last_evaluation, breaks = eval_bins, labels = c('0-0.4', '0.4-0.6', '0.6-0.8', '0.8-1.0'), right = FALSE)

# Visualize the distribution of last evaluation score ranges for employees who left vs. those who stayed
ggplot(df, aes(x = evaluation_range, fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Employees Who Left and Stayed by Last Evaluation Score Range",
       x = "Last Evaluation Score Range",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left"))

# Calculate percentage of employees who left and stayed for each evaluation score range
percentage_by_evaluation <- df %>%
  group_by(evaluation_range, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print the percentages
cat("Percentage of Employees Who Left and Stayed by Last Evaluation Score Range:\n")
print(percentage_by_evaluation[c('evaluation_range', 'Percentage_Left', 'Percentage_Stayed')])

# Determine the maximum value of average monthly hours
max_hours <- max(df$average_montly_hours)

# Define the step size for bins
step_size <- 50

# Create bins from 0 to the maximum value of average monthly hours with the specified step size
hours_bins <- seq(0, max_hours + step_size, by = step_size)

# Create a new column to represent average monthly hours range
df$hours_range <- cut(df$average_montly_hours, breaks = hours_bins)

# Calculate counts and percentages of employees who left and stayed for each range of average monthly hours
counts_by_hours <- df %>%
  group_by(hours_range, left) %>%
  summarise(count = n()) %>%
  spread(key = left, value = count) %>%
  mutate(Percentage_Left = `1` / (`0` + `1`) * 100,
         Percentage_Stayed = `0` / (`0` + `1`) * 100)

# Print counts and percentages
cat("Counts and Percentages of Employees Who Left and Stayed by Average Monthly Hours Range:\n")
print(counts_by_hours)

# Visualize the distribution of employees who left and stayed based on average monthly hours range
ggplot(df, aes(x = hours_range, fill = as.factor(left))) +
  geom_bar(position = "dodge", color = "black") +
  scale_fill_manual(values = c("0" = "lightgreen", "1" = "red")) +  # Set colors
  labs(title = "Distribution of Employees Who Left and Stayed by Average Monthly Hours Range",
       x = "Average Monthly Hours Range",
       y = "Count",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top") +
  guides(fill = guide_legend(title = "Left"))

# Print counts and percentages
cat("\nCounts and Percentages of Employees Who Left and Stayed by Average Monthly Hours Range:\n")
print(counts_by_hours)

# Exclude 'left' column from the dataframe
numeric_df <- df[, sapply(df, is.numeric)]
numeric_df <- numeric_df[, !colnames(numeric_df) %in% c("left")]
print(summary(numeric_df))

# Include 'left' column in the dataframe
numeric_df <- df[, sapply(df, is.numeric)]
left_column <- as.numeric(as.factor(df$left))
numeric_df <- cbind(numeric_df, left_column)

# Calculate correlation matrix
correlation_matrix <- cor(numeric_df, use="pairwise.complete.obs")

# Extract correlations with the 'left' attribute
correlation_with_left <- correlation_matrix['left_column', , drop = FALSE]

# Print correlation values
print("Correlation with 'left' attribute:")
print(correlation_with_left)

library(ggplot2)

# Define the plot using ggplot
ggplot(df, aes(x = time_spend_company, y = satisfaction_level, color = as.factor(left))) +
  geom_point() +
  scale_color_manual(values = c("0" = "lightgreen", "1" = "red")) +
  labs(title = "Satisfaction Level vs. Time Spent in Company",
       x = "Time Spent in Company (Years)",
       y = "Satisfaction Level",
       color = "Left") +
  theme_minimal() +
  theme(legend.position = "top", plot.title = element_text(size = 16)) +
  theme(plot.title = element_text(size = 16))

library(ggplot2)

# Define the plot
ggplot(df, aes(x = number_projects, y = average_montly_hours, color = as.factor(left))) +
  geom_point() +
  scale_color_manual(values = c("0" = "lightgreen", "1" = "red")) +
  labs(title = "Number of Projects vs. Average Monthly Hours",
       x = "Number of Projects",
       y = "Average Monthly Hours",
       color = "Left") +
  theme_minimal()

library(ggplot2)

# Define the plot
ggplot(df, aes(x = time_spend_company, y = average_montly_hours, color = as.factor(left))) +
  geom_point() +
  scale_color_manual(values = c("0" = "lightgreen", "1" = "red")) +
  labs(title = "Time Spent in Company vs. Average Monthly Hours and Employee Retention",
       x = "Time Spent in Company (Years)",
       y = "Average Monthly Hours",
       color = "Left") +
  theme_minimal()

library(ggplot2)

# Create scatter plot
ggplot(df, aes(x = time_spend_company, y = number_projects, color = as.factor(left))) +
  geom_point() +
  labs(title = "Time Spent in Company vs. Number of Projects and Employee Retention",
       x = "Time Spent in Company (Years)",
       y = "Number of Projects",
       color = "Left") +
  theme_minimal()

library(ggplot2)

# Create bar plot
ggplot(df, aes(x = as.factor(time_spend_company), y = number_projects, fill = as.factor(left))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Time Spent in Company vs. Number of Projects and Employee Retention",
       x = "Time Spent in Company (Years)",
       y = "Number of Projects",
       fill = "Left") +
  theme_minimal() +
  theme(legend.position = "top")

# Load necessary libraries
library(ggplot2)
library(GGally)

# Define numerical attributes
numerical_attributes <- c('satisfaction_level', 'last_evaluation', 'number_projects', 'average_montly_hours', 'time_spend_company')

# Create pair plot
ggpairs(df, columns = numerical_attributes, aes(color = as.factor(left)), palette = "husl",
        lower = list(continuous = wrap("smooth", alpha = 0.5))) +
  labs(title = "Pairplot of Satisfaction Level vs. Other Numerical Attributes by Employee Retention") +
  theme(plot.title = element_text(hjust = 0.5))  # Center the title

# Note: Replace 'df' with your actual dataframe name

# Load necessary libraries (if not already loaded)
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualization
library(tidyr)  # For data tidying

# Assume 'df' is your dataframe containing the HR analytics data

# Check the structure of your dataframe
str(df)

# Convert 'left' column to factor if it's not already
df$left <- factor(df$left)

# Perform logistic regression
log_model <- glm(left ~ satisfaction_level + last_evaluation + number_projects +
                   average_montly_hours + time_spend_company, data = df, family = binomial)

# Summarize the logistic regression model
summary(log_model)

# Predictions using the logistic regression model
predictions <- predict(log_model, type = "response")  # type="response" gives probabilities

# Add predicted probabilities to the dataframe
df$predicted_prob <- predictions

# Visualize predicted probabilities
ggplot(df, aes(x = satisfaction_level, y = predicted_prob, color = left)) +
  geom_point(alpha = 0.6) +
  labs(title = "Predicted Probabilities vs. Satisfaction Level by Employee Retention",
       x = "Satisfaction Level",
       y = "Predicted Probability",
       color = "Left") +
  theme_minimal()

# Evaluate model performance (you may need to split data into train/test sets for proper evaluation)
# For simplicity, here's an example using confusion matrix
conf_matrix <- table(df$left, ifelse(predictions > 0.5, 1, 0))
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy